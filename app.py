import streamlit as st
import pandas as pd
import openai
from sentence_transformers import SentenceTransformer, util
import torch
import io
import re

# Ustawienia strony Streamlit
st.set_page_config(page_title="Planer Tre≈õci SEO", layout="wide")

# --- Funkcje pomocnicze ---

@st.cache_resource
def load_model():
    """≈Åaduje i cachuje model SentenceTransformer."""
    return SentenceTransformer('paraphrase-multilingual-mpnet-base-v2')

def find_first_competitor_url(row):
    """Znajduje pierwszy dostƒôpny URL konkurenta w danym wierszu."""
    for col in row.index:
        if col.endswith(': URL') and pd.notna(row[col]):
            return row[col]
    return "Brak"

def generate_titles(api_key, keyword, volume, competitor_url):
    """Generuje tytu≈Çy za pomocƒÖ API OpenAI."""
    try:
        client = openai.OpenAI(api_key=api_key)
        
        # ZAKTUALIZOWANY PROMPT ZGODNIE Z WYTYCZNYMI
        prompt = f"""
        Jeste≈õ ekspertem SEO i copywriterem specjalizujƒÖcym siƒô w tworzeniu anga≈ºujƒÖcych tytu≈Ç√≥w na polskojƒôzyczne blogi.

        Przeanalizuj poni≈ºsze dane:
        - S≈Çowo kluczowe do u≈ºycia: "{keyword}"
        - Miesiƒôczny wolumen wyszukiwania: {volume}
        - Artyku≈Ç konkurencji: {competitor_url}

        Twoje zadanie:
        Zaproponuj 3 unikalne tytu≈Çy artyku≈Ç√≥w blogowych.

        Zasady, kt√≥rych musisz bezwzglƒôdnie przestrzegaƒá:
        1. Ka≈ºdy tytu≈Ç musi zawieraƒá dok≈ÇadnƒÖ frazƒô kluczowƒÖ: "{keyword}".
        2. Tytu≈Çy muszƒÖ mieƒá charakter informacyjny lub poradnikowy (np. "Jak...", "Co to jest...", "Przewodnik po...").
        3. Stosuj polskie zasady pisowni ‚Äì tylko pierwsza litera w tytule wielka (reszta ma≈Çymi, chyba ≈ºe to nazwa w≈Çasna).
        4. Zamiast dwukropka u≈ºywaj my≈õlnika (np. "Tytu≈Ç ‚Äì podtytu≈Ç").
        5. Zwr√≥ƒá odpowied≈∫ wy≈ÇƒÖcznie w formie listy numerowanej (1. Tytu≈Ç, 2. Tytu≈Ç, 3. Tytu≈Ç), bez ≈ºadnych dodatkowych wstƒôp√≥w ani wyja≈õnie≈Ñ.
        """
        
        response = client.chat.completions.create(
            # ZMIANA MODELU NA GPT-4 TURBO
            model="gpt-5",
            messages=[
                {"role": "system", "content": "Jeste≈õ ekspertem SEO i copywriterem."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=150
        )
        
        content = response.choices[0].message.content
        titles = re.findall(r'\d+\.\s*(.*)', content)
        while len(titles) < 3:
            titles.append("---")
        return titles[:3]

    except Exception as e:
        st.error(f"B≈ÇƒÖd podczas generowania tytu≈Ç√≥w dla '{keyword}': {e}")
        return ["B≈ÇƒÖd API", "B≈ÇƒÖd API", "B≈ÇƒÖd API"]

# --- Interfejs U≈ºytkownika (UI) ---

st.title("üöÄ Planer Tre≈õci SEO oparty o Analizƒô Content Gap")
st.markdown("Aplikacja do automatycznego planowania tre≈õci blogowych. Wgraj plik z analizƒÖ luki w tre≈õci oraz listƒô swoich artyku≈Ç√≥w, a aplikacja zidentyfikuje istniejƒÖce tre≈õci i wygeneruje propozycje nowych.")

col1, col2 = st.columns(2)

with col1:
    st.header("1. Konfiguracja")
    num_to_generate = st.number_input(
        "Liczba nowych artyku≈Ç√≥w do wygenerowania", 
        min_value=1, value=20,
        help="Okre≈õl, dla ilu najwa≈ºniejszych s≈Ç√≥w kluczowych (z najwiƒôkszym wolumenem) chcesz wygenerowaƒá propozycje tytu≈Ç√≥w."
    )
    similarity_threshold = st.slider(
        "Pr√≥g podobie≈Ñstwa semantycznego", 
        min_value=0.5, max_value=1.0, value=0.75, step=0.01,
        help="Jak bardzo podobne musi byƒá s≈Çowo kluczowe do tytu≈Çu artyku≈Çu, aby uznaƒá temat za pokryty? (domy≈õlnie: 0.75)"
    )

with col2:
    st.header("2. Wgraj pliki CSV")
    content_gap_file = st.file_uploader("Wgraj plik CSV z analizƒÖ Content Gap", type="csv")
    my_articles_file = st.file_uploader("Wgraj plik CSV z listƒÖ swoich artyku≈Ç√≥w", type="csv")

# --- Logika Aplikacji ---

if st.button("Uruchom Analizƒô", type="primary"):
    openai_api_key = st.secrets.get("OPENAI_API_KEY")
    if not openai_api_key:
        st.error("Klucz API OpenAI nie zosta≈Ç znaleziony w sekretach Streamlit! Upewnij siƒô, ≈ºe doda≈Çe≈õ go w ustawieniach aplikacji.")
    elif content_gap_file is None or my_articles_file is None:
        st.warning("Upewnij siƒô, ≈ºe wgra≈Çe≈õ oba pliki CSV.")
    else:
        with st.spinner("Przeprowadzam analizƒô... U≈ºycie GPT-4 mo≈ºe potrwaƒá nieco d≈Çu≈ºej."):
            try:
                df_gap = pd.read_csv(content_gap_file)
                df_articles = pd.read_csv(my_articles_file)
                
                df_articles.rename(columns={'Address': 'URL', 'Title 1': 'Title'}, inplace=True)
                df_articles = df_articles[~df_articles['Title'].str.contains("Bot Verification|Strona|Kategoria", na=False, case=False)]
                df_articles.dropna(subset=['Title', 'URL'], inplace=True)
                
                st.info(f"Znaleziono {len(df_gap)} s≈Ç√≥w kluczowych w analizie content gap.")
                st.info(f"Znaleziono {len(df_articles)} unikalnych artyku≈Ç√≥w do analizy.")
            except Exception as e:
                st.error(f"B≈ÇƒÖd podczas wczytywania plik√≥w CSV: {e}")
                st.stop()

            model = load_model()
            
            corpus_embeddings = model.encode(df_articles['Title'].tolist(), convert_to_tensor=True, show_progress_bar=True)
            query_embeddings = model.encode(df_gap['Keyword'].tolist(), convert_to_tensor=True, show_progress_bar=True)
            
            hits = util.semantic_search(query_embeddings, corpus_embeddings, top_k=1)
            
            results = []
            for i, row in df_gap.iterrows():
                keyword = row['Keyword']
                volume = row['Volume']
                best_hit = hits[i][0]
                
                if best_hit['score'] > similarity_threshold:
                    matched_article_url = df_articles.iloc[best_hit['corpus_id']]['URL']
                    results.append({'S≈Çowo kluczowe': keyword, 'Wolumen': volume, 'Status': 'Ju≈º istnieje', 'Akcja / Dopasowany URL': matched_article_url, 'Podobie≈Ñstwo': round(best_hit['score'], 2)})
                else:
                    results.append({'S≈Çowo kluczowe': keyword, 'Wolumen': volume, 'Status': 'Nowy temat', 'Akcja / Dopasowany URL': 'Stw√≥rz nowy artyku≈Ç', 'Podobie≈Ñstwo': round(best_hit['score'], 2)})
            
            df_results = pd.DataFrame(results)
            
            df_new_topics = df_results[df_results['Status'] == 'Nowy temat'].copy()
            
            if not df_new_topics.empty:
                df_new_topics_sorted = df_new_topics.sort_values(by='Wolumen', ascending=False)
                df_to_process = df_new_topics_sorted.head(num_to_generate)
                
                st.info(f"Znaleziono {len(df_new_topics)} nowych temat√≥w. Rozpoczynam generowanie propozycji dla {len(df_to_process)} najwa≈ºniejszych z nich...")
                
                original_data_for_processing = df_gap[df_gap['Keyword'].isin(df_to_process['S≈Çowo kluczowe'])]
                df_to_process['Competitor URL'] = original_data_for_processing.apply(find_first_competitor_url, axis=1).values
                
                progress_bar = st.progress(0, text="Generowanie tytu≈Ç√≥w...")
                total_to_process = len(df_to_process)
                
                generated_titles = []
                for i, (_, row) in enumerate(df_to_process.iterrows()):
                    titles = generate_titles(openai_api_key, row['S≈Çowo kluczowe'], row['Wolumen'], row['Competitor URL'])
                    generated_titles.append(titles)
                    progress_bar.progress((i + 1) / total_to_process, text=f"Generowanie tytu≈Ç√≥w... ({i+1}/{total_to_process})")

                df_titles = pd.DataFrame(generated_titles, columns=['Propozycja tematu 1', 'Propozycja tematu 2', 'Propozycja tematu 3'], index=df_to_process.index)
                df_results = df_results.join(df_titles)
            
            df_results.fillna('-', inplace=True)
            st.success("Analiza zako≈Ñczona!")

            st.header("Wyniki Analizy i Plan Tre≈õci")
            
            df_results_sorted = df_results.sort_values(by=['Status', 'Wolumen'], ascending=[True, False])
            st.dataframe(df_results_sorted)
            
            csv_buffer = io.StringIO()
            df_results_sorted.to_csv(csv_buffer, index=False, encoding='utf-8')
            csv_bytes = csv_buffer.getvalue().encode('utf-8')

            st.download_button(
                label="Pobierz gotowy plan tre≈õci jako CSV",
                data=csv_bytes,
                file_name="plan_tresci.csv",
                mime="text/csv",
            )
